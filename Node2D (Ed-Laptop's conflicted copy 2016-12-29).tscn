[gd_scene load_steps=13 format=1]

[ext_resource path="res://kenney_tiles.res" type="TileSet" id=1]
[ext_resource path="res://red.tex" type="Texture" id=2]
[ext_resource path="res://kenpixel_mini.fnt" type="BitmapFont" id=3]

[sub_resource type="ConvexPolygonShape2D" id=1]

custom_solver_bias = 0.0
points = Vector2Array( 5.99204, 12.4277, 5.99204, 24.8554, -5.99204, 24.8554, -5.99204, 12.4277 )

[sub_resource type="ConvexPolygonShape2D" id=2]

custom_solver_bias = 0.0
points = Vector2Array( -5.99204, 12.4277, -17.9761, 12.4277, -17.9761, -24.8554, 17.9761, -24.8554 )

[sub_resource type="ConvexPolygonShape2D" id=3]

custom_solver_bias = 0.0
points = Vector2Array( 5.99204, 12.4277, -5.99204, 12.4277, 17.9761, -24.8554 )

[sub_resource type="ConvexPolygonShape2D" id=4]

custom_solver_bias = 0.0
points = Vector2Array( 5.99204, 12.4277, 17.9761, -24.8554, 17.9761, 12.4277 )

[sub_resource type="GDScript" id=5]

script/source = "extends KinematicBody2D\n\n# Reach the Flag\n# A demo game by Ed Jones and Austin Brown inspired by Geometry Dash\n\n# Much of this code is taken directly from Godot\'s official sample game library\n# All code has been used legally and ethically\n# Textures provided by Kenney (http://kenney.nl)\n# No animals were harmed in the creation of this demo\n\n# Member variables\nconst GRAVITY = 1500.0 # Pixels/second\n\n# Angle in degrees towards either side that the player can consider \"floor\"\nconst FLOOR_ANGLE_TOLERANCE = 40\nconst MOVE_FORCE = 600\nconst MOVE_MIN_SPEED = 290\nconst MOVE_MAX_SPEED = 300\nconst STOP_FORCE = 1300\nconst JUMP_SPEED = 500\nconst JUMP_MAX_AIRBORNE_TIME = 0.35\n\nconst SLIDE_STOP_VELOCITY = 1.0 # One pixel per second\nconst SLIDE_STOP_MIN_TRAVEL = 1.0 # One pixel\n\nvar velocity = Vector2()\nvar on_air_time = 100\nvar jumping = false\nvar rotate = 0\n\nvar prev_jump_pressed = false\n\n\nfunc _fixed_process(delta):\n\t# Create forces\n\tvar force = Vector2(0, GRAVITY)\n\t\n\tvar jump = Input.is_action_pressed(\"move_up\")\n\t\n\tif (jump):\n\t\tGlobals.set(\"move_right\", true) # Only move after the first jump\n\t\n\tvar stop = true\n\t\t\n\tif (Globals.get(\"move_right\")):\n\t\t# Constantly moves the player to the right\n\t\tif (velocity.x >= -MOVE_MIN_SPEED and velocity.x < MOVE_MAX_SPEED):\n\t\t\tforce.x += MOVE_FORCE\n\t\t\tstop = false\n\t\t\t\n\t\n\tif (stop):\n\t\tvar vsign = sign(velocity.x)\n\t\tvar vlen = abs(velocity.x)\n\t\t\n\t\tvlen -= STOP_FORCE*delta\n\t\tif (vlen < 0):\n\t\t\tvlen = 0\n\t\t\n\t\tvelocity.x = vlen*vsign\n\t\n\t# Integrate forces to velocity\n\tvelocity += force*delta\n\t\n\t# Integrate velocity into motion and move\n\tvar motion = velocity*delta\n\t\n\t# Move and consume motion\n\tmotion = move(motion)\n\t\n\tvar floor_velocity = Vector2()\n\t\n\tif (is_colliding()):\n\t\t\n\t\t# Ran against something, is it the floor\? Get normal\n\t\tvar n = get_collision_normal()\n\t\t\n\t\tif (rad2deg(acos(n.dot(Vector2(0, -1)))) < FLOOR_ANGLE_TOLERANCE):\n\t\t\t# If angle to the \"up\" vectors is < angle tolerance\n\t\t\t# char is on floor\n\t\t\ton_air_time = 0\n\t\t\tfloor_velocity = get_collider_velocity()\n\t\t\n\t\tif (on_air_time == 0 and force.x == 0 and get_travel().length() < SLIDE_STOP_MIN_TRAVEL and abs(velocity.x) < SLIDE_STOP_VELOCITY and get_collider_velocity() == Vector2()):\n\t\t\t# Since this formula will always slide the character around, \n\t\t\t# a special case must be considered to to stop it from moving \n\t\t\t# if standing on an inclined floor. Conditions are:\n\t\t\t# 1) Standing on floor (on_air_time == 0)\n\t\t\t# 2) Did not move more than one pixel (get_travel().length() < SLIDE_STOP_MIN_TRAVEL)\n\t\t\t# 3) Not moving horizontally (abs(velocity.x) < SLIDE_STOP_VELOCITY)\n\t\t\t# 4) Collider is not moving\n\t\t\t\n\t\t\trevert_motion()\n\t\t\tvelocity.y = 0.0\n\t\telse:\n\t\t\t# For every other case of motion, our motion was interrupted.\n\t\t\t# Try to complete the motion by \"sliding\" by the normal\n\t\t\tmotion = n.slide(motion)\n\t\t\tvelocity = n.slide(velocity)\n\t\t\t# Then move again\n\t\t\tmove(motion)\n\t\n\tif (floor_velocity != Vector2()):\n\t\t# If floor moves, move with floor\n\t\tmove(floor_velocity*delta)\n\t\t\n\n\tif (jumping and velocity.y > 0):\n\t\t# If falling, no longer jumping\n\t\tjumping = false\n\n\n\tif (on_air_time < JUMP_MAX_AIRBORNE_TIME and jump and not prev_jump_pressed and not jumping):\n\t\t# Jump must also be allowed to happen if the character left the floor a little bit ago.\n\t\t# Makes controls more snappy.\n\t\tvelocity.y = -JUMP_SPEED\n\t\t\n\t\tjumping = true\n\t\t\n\ton_air_time += delta\n\tprev_jump_pressed = jump\n\n\n\tif (velocity.x == 0 or self.get_pos().y > 400):\n\t\t# At this point the player has died\n\t\t# Now we reload the current scene\n\t\tget_tree().reload_current_scene()\n\n\nfunc _ready():\n\t# This variable must be set globally \n\tGlobals.set(\"move_right\", false)\n\tset_fixed_process(true)"

[sub_resource type="GDScript" id=6]

script/source = "extends Sprite\n\nfunc _ready():\n\tvar random = round(rand_range(1, 4)) # Randomise function as required\n\n\t# Randomises the player sprite\n\tif (random == 1):\n\t\tset_texture(preload(\"res://blue.tex\"))\n\telif (random == 2):\n\t\tset_texture(preload(\"res://red.tex\"))\n\telif (random == 3):\n\t\tset_texture(preload(\"res://green.tex\"))\n\telif (random == 4):\n\t\tset_texture(preload(\"res://grey.tex\"))\n\telse:\n\t\tset_texture(preload(\"res://red.tex\")) # Fallback in case of armaggeddon, where 2+2=5\n\t"

[sub_resource type="GDScript" id=7]

script/source = "extends Timer\n\nfunc _ready():\n\tstart()"

[sub_resource type="GDScript" id=8]

script/source = "extends KinematicBody2D\n\n# Reach the Flag\n# A demo game by Ed Jones and Austin Brown inspired by Geometry Dash\n\n# Much of this code is taken directly from Godot\'s official sample game library\n# All code has been used legally and ethically\n# Textures provided by Kenney (http://kenney.nl)\n# No animals were harmed in the creation of this demo\n\n# Member variables\nconst GRAVITY = 0# Pixels/second\n\n# Angle in degrees towards either side that the player can consider \"floor\"\nconst FLOOR_ANGLE_TOLERANCE = 40\nconst MOVE_FORCE = 600\nconst MOVE_MIN_SPEED = 290\nconst MOVE_MAX_SPEED = 300\nconst STOP_FORCE = 1300\n\n\nconst SLIDE_STOP_VELOCITY = 1.0 # One pixel per second\nconst SLIDE_STOP_MIN_TRAVEL = 1.0 # One pixel\n\nvar velocity = Vector2()\nvar on_air_time = 100\nvar rotate = 0\n\nfunc _fixed_process(delta):\n\t# Create forces\n\tvar force = Vector2(0, GRAVITY)\n\t\n\t\n\n\t\n\tvar stop = true\n\t\t\n\tif (Globals.get(\"move_right\")):\n\t\t# Constantly moves the player to the right\n\t\tif (velocity.x >= -MOVE_MIN_SPEED and velocity.x < MOVE_MAX_SPEED):\n\t\t\tforce.x += MOVE_FORCE\n\t\t\tstop = false\n\t\t\t\n\t\n\tif (stop):\n\t\tvar vsign = sign(velocity.x)\n\t\tvar vlen = abs(velocity.x)\n\t\t\n\t\tvlen -= STOP_FORCE*delta\n\t\tif (vlen < 0):\n\t\t\tvlen = 0\n\t\t\n\t\tvelocity.x = vlen*vsign\n\t\n\t# Integrate forces to velocity\n\tvelocity += force*delta\n\t\n\t# Integrate velocity into motion and move\n\tvar motion = velocity*delta\n\t\n\t# Move and consume motion\n\tmotion = move(motion)\n\t\n\tvar floor_velocity = Vector2()\n\t\n\tif (is_colliding()):\n\t\t\n\t\t# Ran against something, is it the floor\? Get normal\n\t\tvar n = get_collision_normal()\n\t\t\n\t\tif (rad2deg(acos(n.dot(Vector2(0, -1)))) < FLOOR_ANGLE_TOLERANCE):\n\t\t\t# If angle to the \"up\" vectors is < angle tolerance\n\t\t\t# char is on floor\n\t\t\ton_air_time = 0\n\t\t\tfloor_velocity = get_collider_velocity()\n\t\t\n\t\tif (on_air_time == 0 and force.x == 0 and get_travel().length() < SLIDE_STOP_MIN_TRAVEL and abs(velocity.x) < SLIDE_STOP_VELOCITY and get_collider_velocity() == Vector2()):\n\t\t\t# Since this formula will always slide the character around, \n\t\t\t# a special case must be considered to to stop it from moving \n\t\t\t# if standing on an inclined floor. Conditions are:\n\t\t\t# 1) Standing on floor (on_air_time == 0)\n\t\t\t# 2) Did not move more than one pixel (get_travel().length() < SLIDE_STOP_MIN_TRAVEL)\n\t\t\t# 3) Not moving horizontally (abs(velocity.x) < SLIDE_STOP_VELOCITY)\n\t\t\t# 4) Collider is not moving\n\t\t\t\n\t\t\trevert_motion()\n\t\t\tvelocity.y = 0.0\n\t\telse:\n\t\t\t# For every other case of motion, our motion was interrupted.\n\t\t\t# Try to complete the motion by \"sliding\" by the normal\n\t\t\tmotion = n.slide(motion)\n\t\t\tvelocity = n.slide(velocity)\n\t\t\t# Then move again\n\t\t\tmove(motion)\n\t\n\tif (floor_velocity != Vector2()):\n\t\t# If floor moves, move with floor\n\t\tmove(floor_velocity*delta)\n\t\t\n\n\n\tif (velocity.x == 0 or self.get_pos().y > 400):\n\t\t# At this point the player has died\n\t\t# Now we reload the current scene\n\t\tget_tree().reload_current_scene()\n\n\nfunc _ready():\n\t# This variable must be set globally \n\tGlobals.set(\"move_right\", false)\n\tset_fixed_process(true)"

[sub_resource type="GDScript" id=9]

script/source = "extends Label\n\nonready var timer = get_node(\"./Timer\")\nonready var node2d = get_node(\"./Node2D\")\nvar count = 0\n\nfunc _fixed_process(delta):\n\t\n\tself.set_text(str(count))\n\t\nfunc _ready():\n\t#timer.start()\n\tset_fixed_process(true)\n\nfunc _on_Timer_timeout():\n\tcount += 1"

[node name="Node2D" type="Node2D"]

[node name="TileMap" type="TileMap" parent="."]

mode = 0
tile_set = ExtResource( 1 )
cell/size = Vector2( 64, 64 )
cell/quadrant_size = 16
cell/custom_transform = Matrix32( 1, 0, 0, 1, 0, 0 )
cell/half_offset = 2
cell/tile_origin = 0
cell/y_sort = false
collision/use_kinematic = false
collision/friction = 0.0
collision/bounce = 0.0
collision/layers = 1
collision/mask = 1
occluder/light_mask = 1
tile_data = IntArray( -327648, 25, -327647, 2, -262115, 25, -262114, 2, -262104, 25, -262103, 2, -262095, 25, -262094, 2, -196582, 25, -196581, 2, -196573, 25, -196572, 26, -196571, 26, -196570, 2, -196562, 25, -196561, 2, -196550, 3, -196533, 4, -196532, 5, -196525, 3, -131049, 25, -131048, 2, -131029, 25, -131028, 2, -131017, 3, -131003, 3, -131000, 3, -130997, 0, -130996, 0, -130992, 3, -65516, 25, -65515, 2, -65483, 3, -65469, 3, -65461, 0, -65460, 0, -65449, 3, 8, 4, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 5, 64, 4, 65, 5, 75, 0, 76, 0, 99, 29, 131064, 1, 131065, 1, 131066, 1, 131067, 1, 131068, 1, 131069, 1, 131070, 1, 131071, 1, 65536, 1, 65537, 1, 65538, 1, 65539, 1, 65540, 1, 65541, 1, 65542, 1, 65543, 1, 65544, 12, 65545, 0, 65546, 0, 65547, 0, 65548, 0, 65549, 0, 65550, 0, 65551, 0, 65552, 0, 65553, 0, 65554, 0, 65596, 4, 65597, 1, 65598, 1, 65599, 1, 65600, 12, 65601, 13, 65602, 1, 65603, 1, 65604, 1, 65605, 1, 65606, 1, 65607, 1, 65608, 1, 65609, 1, 65610, 1, 65611, 12, 65612, 13, 65613, 1, 65614, 5, 65616, 4, 65617, 1, 65618, 1, 65619, 5, 65627, 4, 65628, 1, 65629, 1, 65630, 1, 65631, 1, 65632, 1, 65633, 1, 65634, 1, 65635, 1, 65636, 1, 65637, 1, 65638, 1, 65639, 1, 65640, 1, 65641, 1, 65642, 1, 65643, 1, 65644, 1, 65645, 1, 65646, 1, 65647, 1, 65648, 1, 65649, 1, 65650, 1, 65651, 1, 65652, 1, 65653, 1, 65654, 1, 65655, 1, 65656, 1, 65657, 1, 65658, 1, 65659, 1, 65660, 1, 65661, 1, 65662, 1, 65663, 1, 65664, 1, 65665, 1, 65666, 1, 65667, 1, 65668, 1, 65669, 1, 65670, 1, 65671, 1, 65672, 5, 196600, 0, 196601, 0, 196602, 0, 196603, 0, 196604, 0, 196605, 0, 196606, 0, 196607, 0, 131072, 0, 131073, 0, 131074, 0, 131075, 0, 131076, 0, 131077, 0, 131078, 0, 131079, 0, 131080, 0, 131081, 0, 131082, 0, 131083, 0, 131084, 0, 131085, 0, 131086, 0, 131087, 0, 131088, 0, 131089, 0, 131090, 0, 131132, 0, 131133, 0, 131134, 0, 131135, 0, 131136, 0, 131137, 0, 131138, 0, 131139, 0, 131140, 0, 131141, 0, 131142, 0, 131143, 0, 131144, 0, 131145, 0, 131146, 0, 131147, 0, 131148, 0, 131149, 0, 131150, 0, 131152, 0, 131153, 0, 131154, 0, 131155, 0, 131163, 0, 131164, 0, 131165, 0, 131166, 0, 131167, 0, 131168, 0, 131169, 0, 131170, 0, 131171, 0, 131172, 0, 131173, 0, 131174, 0, 131175, 0, 131176, 0, 131177, 0, 131178, 0, 131179, 0, 131180, 0, 131181, 0, 131182, 0, 131183, 0, 131184, 0, 131185, 0, 131186, 0, 131187, 0, 131188, 0, 131189, 0, 131190, 0, 131191, 0, 131192, 0, 131193, 0, 131194, 0, 131195, 0, 131196, 0, 131197, 0, 131198, 0, 131199, 0, 131200, 0, 131201, 0, 131202, 0, 131203, 0, 131204, 0, 131205, 0, 131206, 0, 131207, 0, 131208, 0, 262136, 0, 262137, 0, 262138, 0, 262139, 0, 262140, 0, 262141, 0, 262142, 0, 262143, 0, 196608, 0, 196609, 0, 196610, 0, 196611, 0, 196612, 0, 196613, 0, 196614, 0, 196615, 0, 196616, 0, 196617, 0, 196618, 0, 196619, 0, 196620, 0, 196621, 0, 196622, 0, 196623, 0, 196624, 0, 196625, 0, 196626, 0, 196668, 0, 196669, 0, 196670, 0, 196671, 0, 196672, 0, 196673, 0, 196674, 0, 196675, 0, 196676, 0, 196677, 0, 196678, 0, 196679, 0, 196680, 0, 196681, 0, 196682, 0, 196683, 0, 196684, 0, 196685, 0, 196686, 0, 196688, 0, 196689, 0, 196690, 0, 196691, 0, 196699, 0, 196700, 0, 196701, 0, 196702, 0, 196703, 0, 196704, 0, 196705, 0, 196706, 0, 196707, 0, 196708, 0, 196709, 0, 196710, 0, 196711, 0, 196712, 0, 196713, 0, 196714, 0, 196715, 0, 196716, 0, 196717, 0, 196718, 0, 196719, 0, 196720, 0, 196721, 0, 196722, 0, 196723, 0, 196724, 0, 196725, 0, 196726, 0, 196727, 0, 196728, 0, 196729, 0, 196730, 0, 196731, 0, 196732, 0, 196733, 0, 196734, 0, 196735, 0, 196736, 0, 196737, 0, 196738, 0, 196739, 0, 196740, 0, 196741, 0, 196742, 0, 196743, 0, 196744, 0, 327672, 0, 327673, 0, 327674, 0, 327675, 0, 327676, 0, 327677, 0, 327678, 0, 327679, 0, 262144, 0, 262145, 0, 262146, 0, 262147, 0, 262148, 0, 262149, 0, 262150, 0, 262151, 0, 262152, 0, 262153, 0, 262154, 0, 262155, 0, 262156, 0, 262157, 0, 262158, 0, 262159, 0, 262160, 0, 262161, 0, 262162, 0, 262204, 0, 262205, 0, 262206, 0, 262207, 0, 262208, 0, 262209, 0, 262210, 0, 262211, 0, 262212, 0, 262213, 0, 262214, 0, 262215, 0, 262216, 0, 262217, 0, 262218, 0, 262219, 0, 262220, 0, 262221, 0, 262222, 0, 262224, 0, 262225, 0, 262226, 0, 262227, 0, 262235, 0, 262236, 0, 262237, 0, 262238, 0, 262239, 0, 262240, 0, 262241, 0, 262242, 0, 262243, 0, 262244, 0, 262245, 0, 262246, 0, 262247, 0, 262248, 0, 262249, 0, 262250, 0, 262251, 0, 262252, 0, 262253, 0, 262254, 0, 262255, 0, 262256, 0, 262257, 0, 262258, 0, 262259, 0, 262260, 0, 262261, 0, 262262, 0, 262263, 0, 262264, 0, 262265, 0, 262266, 0, 262267, 0, 262268, 0, 262269, 0, 262270, 0, 262271, 0, 262272, 0, 262273, 0, 262274, 0, 262275, 0, 262276, 0, 262277, 0, 262278, 0, 262279, 0, 262280, 0, 327740, 0, 327741, 0, 327742, 0, 327743, 0, 327744, 0, 327745, 0, 327746, 0, 327747, 0, 327748, 0, 327749, 0, 327750, 0, 327751, 0, 327752, 0, 327753, 0, 327754, 0, 327755, 0, 327756, 0, 327757, 0, 327758, 0, 327760, 0, 327761, 0, 327762, 0, 327763, 0, 327771, 0, 327772, 0, 327773, 0, 327774, 0, 327775, 0, 327776, 0, 327777, 0, 327778, 0, 327779, 0, 327780, 0, 327781, 0, 327782, 0, 327783, 0, 327784, 0, 327785, 0, 327786, 0, 327787, 0, 327788, 0, 327789, 0, 327790, 0, 327791, 0, 327792, 0, 327793, 0, 327794, 0, 327795, 0, 327796, 0, 327797, 0, 327798, 0, 327799, 0, 327800, 0, 327801, 0, 327802, 0, 327803, 0, 327804, 0, 327805, 0, 327806, 0, 327807, 0, 327808, 0, 327809, 0, 327810, 0, 327811, 0, 327812, 0, 327813, 0, 327814, 0, 327815, 0, 327816, 0 )

[node name="player" type="KinematicBody2D" parent="."]

transform/pos = Vector2( 0, 40 )
input/pickable = false
shapes/0/shape = SubResource( 1 )
shapes/0/transform = Matrix32( 1.00133, 0, 0, 0.965587, 0, 0 )
shapes/0/trigger = false
shapes/1/shape = SubResource( 2 )
shapes/1/transform = Matrix32( 1.00133, 0, 0, 0.965587, 0, 0 )
shapes/1/trigger = false
shapes/2/shape = SubResource( 3 )
shapes/2/transform = Matrix32( 1.00133, 0, 0, 0.965587, 0, 0 )
shapes/2/trigger = false
shapes/3/shape = SubResource( 4 )
shapes/3/transform = Matrix32( 1.00133, 0, 0, 0.965587, 0, 0 )
shapes/3/trigger = false
collision/layers = 1
collision/mask = 1
collision/margin = 0.08
script/script = SubResource( 5 )

[node name="sprite" type="Sprite" parent="player"]

transform/scale = Vector2( 1.00133, 0.965587 )
z/z = 1
texture = ExtResource( 2 )
script/script = SubResource( 6 )

[node name="Camera2D" type="Camera2D" parent="player/sprite"]

transform/pos = Vector2( 0.0425034, -1.14047 )
anchor_mode = 1
rotating = false
current = true
zoom = Vector2( 1, 1 )
limit/left = -10000000
limit/top = -10000000
limit/right = 10000000
limit/bottom = 300
drag_margin/h_enabled = true
drag_margin/v_enabled = true
smoothing/enable = false
smoothing/speed = 5.0
drag_margin/left = 0.2
drag_margin/top = 0.0
drag_margin/right = 0.2
drag_margin/bottom = 0.2

[node name="Timer" type="Timer" parent="player/sprite/Camera2D"]

process_mode = 1
wait_time = 1.0
one_shot = false
autostart = false
script/script = SubResource( 7 )

[node name="Tap to Jump" type="Label" parent="."]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = -256.0
margin/top = -152.0
margin/right = 264.0
margin/bottom = -89.0
custom_fonts/font = ExtResource( 3 )
text = "Space to Jump\nReach the Flag"
align = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="You Win" type="Label" parent="."]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 6072.0
margin/top = -96.0
margin/right = 6630.0
margin/bottom = -33.0
custom_fonts/font = ExtResource( 3 )
text = "You Win"
align = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="Easter Egg" type="Label" parent="."]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 7464.0
margin/top = -280.0
margin/right = 8022.0
margin/bottom = 47.0
custom_fonts/font = ExtResource( 3 )
text = "Game By\nEd Jones\n&\nAustin Brown\nfor 12 SDD"
align = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="KinematicBody2D" type="KinematicBody2D" parent="."]

input/pickable = false
collision/layers = 1
collision/mask = 1
collision/margin = 0.08
script/script = SubResource( 8 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

layer = 1
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )

[node name="Timer Label" type="Label" parent="CanvasLayer"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 19.0
margin/top = 11.0
margin/right = 181.0
margin/bottom = 116.0
custom_fonts/font = ExtResource( 3 )
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1
script/script = SubResource( 9 )

[connection signal="timeout" from="player/sprite/Camera2D/Timer" to="CanvasLayer/Timer Label" method="_on_Timer_timeout"]


