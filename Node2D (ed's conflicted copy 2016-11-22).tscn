[gd_scene load_steps=5 format=1]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]

script/source = ""

[sub_resource type="TileSet" id=2]


[sub_resource type="GDScript" id=3]

script/source = "extends KinematicBody2D\n\n# This is a simple collision demo showing how\n# the kinematic controller works.\n# move() will allow to move the node, and will\n# always move it to a non-colliding spot,\n# as long as it starts from a non-colliding spot too.\n\n# Member variables\nconst GRAVITY = 500.0 # Pixels/second\n\n# Angle in degrees towards either side that the player can consider \"floor\"\nconst FLOOR_ANGLE_TOLERANCE = 40\nconst WALK_FORCE = 600\nconst WALK_MIN_SPEED = 10\nconst WALK_MAX_SPEED = 200\nconst STOP_FORCE = 1300\nconst JUMP_SPEED = 200\nconst JUMP_MAX_AIRBORNE_TIME = 0.2\n\nconst SLIDE_STOP_VELOCITY = 1.0 # One pixel per second\nconst SLIDE_STOP_MIN_TRAVEL = 1.0 # One pixel\n\nvar velocity = Vector2()\nvar on_air_time = 100\nvar jumping = false\n\nvar prev_jump_pressed = false\n\n\nfunc _fixed_process(delta):\n\t# Create forces\n\tvar force = Vector2(0, GRAVITY)\n\t\n\tvar walk_left = Input.is_action_pressed(\"move_left\")\n\tvar walk_right = Input.is_action_pressed(\"move_right\")\n\tvar jump = Input.is_action_pressed(\"move_up\")\n\t\n\tvar stop = true\n\t\n\tif (walk_left):\n\t\tif (velocity.x <= WALK_MIN_SPEED and velocity.x > -WALK_MAX_SPEED):\n\t\t\tforce.x -= WALK_FORCE\n\t\t\tstop = false\n\telif (walk_right):\n\t\tif (velocity.x >= -WALK_MIN_SPEED and velocity.x < WALK_MAX_SPEED):\n\t\t\tforce.x += WALK_FORCE\n\t\t\tstop = false\n\t\n\tif (stop):\n\t\tvar vsign = sign(velocity.x)\n\t\tvar vlen = abs(velocity.x)\n\t\t\n\t\tvlen -= STOP_FORCE*delta\n\t\tif (vlen < 0):\n\t\t\tvlen = 0\n\t\t\n\t\tvelocity.x = vlen*vsign\n\t\n\t# Integrate forces to velocity\n\tvelocity += force*delta\n\t\n\t# Integrate velocity into motion and move\n\tvar motion = velocity*delta\n\t\n\t# Move and consume motion\n\tmotion = move(motion)\n\t\n\tvar floor_velocity = Vector2()\n\t\n\tif (is_colliding()):\n\t\t# You can check which tile was collision against with this\n\t\t# print(get_collider_metadata())\n\t\t\n\t\t# Ran against something, is it the floor\? Get normal\n\t\tvar n = get_collision_normal()\n\t\t\n\t\tif (rad2deg(acos(n.dot(Vector2(0, -1)))) < FLOOR_ANGLE_TOLERANCE):\n\t\t\t# If angle to the \"up\" vectors is < angle tolerance\n\t\t\t# char is on floor\n\t\t\ton_air_time = 0\n\t\t\tfloor_velocity = get_collider_velocity()\n\t\t\n\t\tif (on_air_time == 0 and force.x == 0 and get_travel().length() < SLIDE_STOP_MIN_TRAVEL and abs(velocity.x) < SLIDE_STOP_VELOCITY and get_collider_velocity() == Vector2()):\n\t\t\t# Since this formula will always slide the character around, \n\t\t\t# a special case must be considered to to stop it from moving \n\t\t\t# if standing on an inclined floor. Conditions are:\n\t\t\t# 1) Standing on floor (on_air_time == 0)\n\t\t\t# 2) Did not move more than one pixel (get_travel().length() < SLIDE_STOP_MIN_TRAVEL)\n\t\t\t# 3) Not moving horizontally (abs(velocity.x) < SLIDE_STOP_VELOCITY)\n\t\t\t# 4) Collider is not moving\n\t\t\t\n\t\t\trevert_motion()\n\t\t\tvelocity.y = 0.0\n\t\telse:\n\t\t\t# For every other case of motion, our motion was interrupted.\n\t\t\t# Try to complete the motion by \"sliding\" by the normal\n\t\t\tmotion = n.slide(motion)\n\t\t\tvelocity = n.slide(velocity)\n\t\t\t# Then move again\n\t\t\tmove(motion)\n\t\n\tif (floor_velocity != Vector2()):\n\t\t# If floor moves, move with floor\n\t\tmove(floor_velocity*delta)\n\t\n\tif (jumping and velocity.y > 0):\n\t\t# If falling, no longer jumping\n\t\tjumping = false\n\t\n\tif (on_air_time < JUMP_MAX_AIRBORNE_TIME and jump and not prev_jump_pressed and not jumping):\n\t\t# Jump must also be allowed to happen if the character left the floor a little bit ago.\n\t\t# Makes controls more snappy.\n\t\tvelocity.y = -JUMP_SPEED\n\t\tjumping = true\n\t\n\ton_air_time += delta\n\tprev_jump_pressed = jump\n\n\nfunc _ready():\n\tset_fixed_process(true)"

[node name="Node2D" type="Node2D"]

transform/pos = Vector2( 33, 30 )
script/script = SubResource( 1 )

[node name="TileMap" type="TileMap" parent="."]

mode = 0
tile_set = SubResource( 2 )
cell/size = Vector2( 64, 64 )
cell/quadrant_size = 16
cell/custom_transform = Matrix32( 1, 0, 0, 1, 0, 0 )
cell/half_offset = 2
cell/tile_origin = 0
cell/y_sort = false
collision/use_kinematic = true
collision/friction = 1.0
collision/bounce = 0.0
collision/layers = 1
collision/mask = 1
occluder/light_mask = 1
tile_data = IntArray(  )

[node name="Sprite" type="Sprite" parent="TileMap"]

texture = ExtResource( 1 )

[node name="KinematicBody2D" type="KinematicBody2D" parent="."]

input/pickable = false
collision/layers = 1
collision/mask = 1
collision/margin = 0.08
script/script = SubResource( 3 )

[node name="player" type="Sprite" parent="KinematicBody2D"]

transform/pos = Vector2( 490, 21 )
texture = ExtResource( 1 )


